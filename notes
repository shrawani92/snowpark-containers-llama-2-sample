Custom OAuth Authentication for Snowflake Using a Python OAuth Server

Overview

This document provides a step-by-step guide to setting up Custom OAuth authentication for Snowflake using a Python-based OAuth 2.0 server. The goal is to allow users and applications to authenticate with Snowflake using an external OAuth provider without relying on a third-party Identity Provider (IdP) like Okta or Azure AD.

Why Use a Custom OAuth Server?

If your organization does not have an existing OAuth IdP, you can implement your own lightweight OAuth server to:
	•	Manage authentication without an external IdP.
	•	Issue and validate OAuth access tokens for Snowflake.
	•	Control user authentication and permissions at a granular level.
	•	Integrate with existing authentication workflows (e.g., internal databases, custom login systems).

How OAuth Authentication Works in Snowflake

1. OAuth Authorization Flow
	1.	A user or application requests authentication.
	2.	The OAuth server verifies credentials and issues an authorization code.
	3.	The client exchanges the authorization code for an OAuth access token.
	4.	The client uses the access token to connect to Snowflake.
	5.	Snowflake validates the access token and grants access.

2. Snowflake’s Role in Custom OAuth
	•	Snowflake does not issue tokens in a Custom OAuth setup.
	•	Snowflake trusts the external OAuth provider (in this case, our custom Python server) to issue valid tokens.
	•	The access token is validated against the OAuth issuer and signing keys before granting access.

Step-by-Step Implementation

Step 1: Install Required Dependencies

To create an OAuth server in Python, install the necessary libraries:

pip install flask authlib

Step 2: Create a Python-Based OAuth Server

This Flask-based OAuth server handles authentication, authorization, and token issuance.

oauth_server.py - OAuth Server Implementation

from flask import Flask, request, jsonify, redirect
from authlib.jose import jwt
import time

app = Flask(__name__)

# OAuth configuration
CLIENT_ID = "your_client_id"
CLIENT_SECRET = "your_client_secret"
REDIRECT_URI = "https://your_snowflake_account.snowflakecomputing.com/oauth/callback"
ISSUER = "https://your-custom-oauth.com"

# Dummy user database (Replace with real authentication)
USERS = {"user1": "password123"}

# Function to generate a JWT access token
def generate_access_token(user):
    header = {"alg": "HS256"}
    payload = {
        "sub": user,
        "iss": ISSUER,
        "iat": int(time.time()),
        "exp": int(time.time()) + 3600,  # Token valid for 1 hour
    }
    return jwt.encode(header, payload, "your_secret_key")

# Authorization endpoint (Simulates user login)
@app.route("/authorize")
def authorize():
    user = request.args.get("user")
    password = request.args.get("password")

    if USERS.get(user) != password:
        return jsonify({"error": "Invalid credentials"}), 401

    auth_code = "sample_auth_code"  # Simulated authorization code
    return redirect(f"{REDIRECT_URI}?code={auth_code}")

# Token endpoint (Exchange authorization code for access token)
@app.route("/token", methods=["POST"])
def token():
    auth_code = request.form.get("code")

    if auth_code != "sample_auth_code":
        return jsonify({"error": "Invalid authorization code"}), 400

    access_token = generate_access_token("user1")
    return jsonify({"access_token": access_token, "token_type": "Bearer", "expires_in": 3600})

# User info endpoint (Optional)
@app.route("/userinfo")
def userinfo():
    return jsonify({"user": "user1", "roles": ["read", "write"]})

if __name__ == "__main__":
    app.run(port=5000)

Step 3: Configure Snowflake to Use the Custom OAuth Provider

Once the OAuth server is running, configure Snowflake to trust it as an external OAuth provider.

Run the following SQL command in Snowflake:

CREATE SECURITY INTEGRATION my_custom_oauth
  TYPE = OAUTH
  ENABLED = TRUE
  OAUTH_CLIENT = CUSTOM
  OAUTH_CLIENT_TYPE = EXTERNAL_OAUTH
  OAUTH_ISSUER = 'https://your-custom-oauth.com'
  OAUTH_AUTHORIZATION_ENDPOINT = 'http://your-oauth-server.com:5000/authorize'
  OAUTH_TOKEN_ENDPOINT = 'http://your-oauth-server.com:5000/token'
  OAUTH_CLIENT_ID = 'your_client_id'
  OAUTH_CLIENT_SECRET = 'your_client_secret'
  OAUTH_REDIRECT_URI = 'https://your_snowflake_account.snowflakecomputing.com/oauth/callback';

This configuration:
✅ Enables Custom OAuth authentication in Snowflake.
✅ Defines the OAuth issuer (our Python OAuth server).
✅ Specifies the authorization and token endpoints used for authentication.
✅ Registers the OAuth client ID and secret.

Step 4: Testing OAuth Authentication

1. Start the OAuth Server

Run the Python OAuth server:

python oauth_server.py

This will start the OAuth server on http://localhost:5000.

2. Simulate an Authorization Request

Open a browser and visit:

http://localhost:5000/authorize?user=user1&password=password123

Expected Behavior: The browser should redirect to Snowflake with an authorization code.

3. Exchange Authorization Code for Access Token

Use curl or Postman to test the token exchange:

curl -X POST http://localhost:5000/token -d "code=sample_auth_code"

Expected Output (Sample JSON Response):

{
  "access_token": "your_generated_access_token",
  "token_type": "Bearer",
  "expires_in": 3600
}

4. Use the Access Token to Connect to Snowflake

Once the access token is received, use it to authenticate with Snowflake.

Example (Using Python Snowflake Connector):

import snowflake.connector

conn = snowflake.connector.connect(
    account='your_snowflake_account',
    authenticator='oauth',
    token='your_generated_access_token'
)
print("Connected to Snowflake!")

Security Considerations
	•	Use HTTPS: In production, the OAuth server must use HTTPS instead of HTTP.
	•	Store Secrets Securely: Never hardcode client secrets; use environment variables or a secure vault.
	•	Token Expiry: Ensure access tokens have an appropriate expiry time and implement refresh tokens if needed.
	•	JWT Signature Validation: Snowflake must validate the token’s issuer (iss) and signature to prevent spoofing.

Summary

✅ Custom OAuth Server built using Python (Flask + Authlib).
✅ OAuth authentication for Snowflake without an external IdP.
✅ Secure token issuance & validation via JWT.
✅ Seamless Snowflake integration via SECURITY INTEGRATION.

This setup allows users and applications to authenticate without username/password while maintaining control over access management.

Next Steps

Would you like to extend this implementation with refresh tokens, JWT key rotation, or user roles? Let me know!